## List of complete inputs | filters | output available on the official website: 
## http://logstash.net/docs/latest/index
 
## Configuration syntax: http://logstash.net/docs/latest/configuration
 
 
###### Data sources to process #####
input {
	file {
	    path => [ "/var/log/apache2/access.log", "/var/log/apache2/other_vhosts_access.log" ]
	    type => "apache-access"
	}
	file {
	    path => "/var/log/apache2/error.log"
	    type => "apache-error"
	} 
	file {
	    path => [ "/var/log/syslog", "/var/log/auth.log", "/var/log/mail.info" ]
	    type => "syslog"
	}
	file {
	    path => "/var/log/iptables.log"
	    type => "iptables"
	}
	file {
	    path => "/var/log/fail2ban.log"
	    type => "fail2ban"
	}
}

filter {
	# REMINDERS:
	#  >> you can check on Kibana the field name to use for each filter.
	#  >> you can find the list of GROK pattern over here: https://github.com/elasticsearch/logstash/blob/v1.4.2/patterns/grok-patterns

	# ------------------------ Parse services logs into fields ---------------------------
	# APACHE 2
	if [type] == "apache-access" {
		# To process log data (message's content) using some regex or precompiled GROK pattern
		grok {
			match => [ "message", "%{COMBINEDAPACHELOG}"]
		}
		# To extract log's time according to a date pattern
		date {
			match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z"]
		}
		# Extraction browser information, if available.
		if [agent] != "" {
			useragent {
				source => "agent"
			}
		}
		if [clientip] != "" {
			geoip {
				source => "clientip"
			}
		}
	}

	if [type] == "apache-error" {
		grok {
			match => [ "message", "%{APACHEERRORLOG}"]
			# Directory where to find the custom patterns
			patterns_dir => ["/etc/logstash/grok"]
		}
		if [clientip] != "" {
			geoip {
				source => "clientip"
			}
		}
	}

	# SYSLOG
	if [type] == "syslog" {
		grok {
			match => ["message", "%{SYSLOGBASE}"]
		}
	}

	# IPTABLES
	if [type] == "iptables" {
		grok {
			match => ["message", "%{IPTABLES}"]
			patterns_dir => ["/etc/logstash/grok"]
		}
		# Default 'geoip' == src_ip. That means it's easy to display the DROPPED INPUT :)
                if [src_ip] != "" {
			geoip {
			        source => "src_ip"
			}
		}

                if [dst_ip] != "" {
			geoip {
			        source => "dst_ip"
				target => "dst_geoip"
			}
		}
	}

	# Fail2ban
	if [type] == "fail2ban" {
		grok {
			match => ["message", "%{FAIL2BAN}"]
			patterns_dir => ["/etc/logstash/grok"]
		}
                if [ban_ip] != "" {
			geoip {
			        source => "ban_ip"
			}
		}
	}

}
 
output {
	elasticsearch {
		cluster => "VEHCO"
#		node_name => "smartcard-monitoring"
		protocol => "http"
		# port => ""
		host => "192.168.1.203"
		index => "smartcard-monitoring-%{+YYYY.MM.dd}"
	}
}
