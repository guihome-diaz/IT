## List of complete inputs | filters | output available on the official website: 
## http://logstash.net/docs/latest/index
 
## Configuration syntax: http://logstash.net/docs/latest/configuration
 
 
###### Data sources to process #####
input {
    # Answers the question - Where?
	file {
	    path => [ "/home/qa1/catalina.base/logs/vehco/*.log" ]
	    type => "vehco-qa1"
	}
	file {
	    path => [ "/home/qa2/catalina.base/logs/vehco/*.log" ]
	    type => "vehco-qa2"
	}
	file {
	    path => [ "/home/qa3/catalina.base/logs/vehco/*.log" ]
	    type => "vehco-qa3"
	}
	file {
	    path => [ "/home/beta3/catalina.base/logs/vehco/*.log" ]
	    type => "vehco-beta3"
	}
	file {
	    path => [ "/home/server-main/catalina.base/logs/vehco/*.log" ]
	    type => "vehco-server-main"
	}
	file {
	    path => [ "/home/server-cliffton/catalina.base/logs/vehco/*.log" ]
	    type => "vehco-server-cliffton"
	}
}

filter {
    # Answers the question - what are you looking for? 

	### All exceptions belong to the previous event
    #multiline {
	#	pattern => "(([^\s]+)Exception.+)|(at:.+)"
	#	negate => false
	#	what => "previous"
    #}

	# All lines that does not start with %{TIMESTAMP} or ' ' + %{TIMESTAMP} belong to the previous event
	multiline {
		pattern => "(([\s]+)20[0-9]{2}-)|20[0-9]{2}-"
		negate => true
		what => "previous"
	}	

	# QA1
	if [type] == "vehco-qa1" {
		grok {
			patterns_dir => ["/etc/logstash/grok"]
			match => [
				"message", "^\s*%{TIMESTAMP_ISO8601:timestamp}\s*%{LOGLEVEL:level} (?:(%{USERNAME:thread} %{JAVACLASS:logger}|%{USERNAME:thread} %{WORD:logger}|%{JAVACLASS:logger}|%{WORD:logger}))(?<content>(.|\r|\n)*)"
				]
			add_tag => "vehco-log-qa1"
		}
		# Something wrong occurred !!! :O
		if "_grokparsefailure" in [tags] {
			grok {
				 patterns_dir => "/etc/logstash/grok"
				 match=>[
					"message","(?<content>(.|\r|\n)*)"
					]
				 add_tag => "vehco-log-qa1-grok_error"
	                     }
		}
	}

	# QA2
	if [type] == "vehco-qa2" {
		grok {
			patterns_dir => ["/etc/logstash/grok"]
			match => [
				"message", "^\s*%{TIMESTAMP_ISO8601:timestamp}\s*%{LOGLEVEL:level} (?:(%{USERNAME:thread} %{JAVACLASS:logger}|%{USERNAME:thread} %{WORD:logger}|%{JAVACLASS:logger}|%{WORD:logger}))(?<content>(.|\r|\n)*)"
				]
			add_tag => "vehco-log-qa2"
		}
		# Something wrong occurred !!! :O
		if "_grokparsefailure" in [tags] {
			grok {
				 patterns_dir => "/etc/logstash/grok"
				 match=>[
					"message","(?<content>(.|\r|\n)*)"
					]
				 add_tag => "vehco-log-qa2-grok_error"
	                     }
		}
	}

	# QA3
	if [type] == "vehco-qa3" {
		grok {
			patterns_dir => ["/etc/logstash/grok"]
			match => [
				"message", "^\s*%{TIMESTAMP_ISO8601:timestamp}\s*%{LOGLEVEL:level} (?:(%{USERNAME:thread} %{JAVACLASS:logger}|%{USERNAME:thread} %{WORD:logger}|%{JAVACLASS:logger}|%{WORD:logger}))(?<content>(.|\r|\n)*)"
				]
			add_tag => "vehco-log-qa3"
		}
		# Something wrong occurred !!! :O
		if "_grokparsefailure" in [tags] {
			grok {
				 patterns_dir => "/etc/logstash/grok"
				 match=>[
					"message","(?<content>(.|\r|\n)*)"
					]
				 add_tag => "vehco-log-qa3-grok_error"
	                     }
		}
	}

	# BETA3
	if [type] == "vehco-beta3" {
		grok {
			patterns_dir => ["/etc/logstash/grok"]
			match => [
				"message", "^\s*%{TIMESTAMP_ISO8601:timestamp}\s*%{LOGLEVEL:level} (?:(%{USERNAME:thread} %{JAVACLASS:logger}|%{USERNAME:thread} %{WORD:logger}|%{JAVACLASS:logger}|%{WORD:logger}))(?<content>(.|\r|\n)*)"
				]
			add_tag => "vehco-log-qa3"
		}
		# Something wrong occurred !!! :O
		if "_grokparsefailure" in [tags] {
			grok {
				 patterns_dir => "/etc/logstash/grok"
				 match=>[
					"message","(?<content>(.|\r|\n)*)"
					]
				 add_tag => "vehco-log-qa3-grok_error"
	                     }
		}
       }
	
	# Server-main
	if [type] == "server-main" {
		grok {
			patterns_dir => ["/etc/logstash/grok"]
			match => [
				"message", "^\s*%{TIMESTAMP_ISO8601:timestamp}\s*%{LOGLEVEL:level} (?:(%{USERNAME:thread} %{JAVACLASS:logger}|%{USERNAME:thread} %{WORD:logger}|%{JAVACLASS:logger}|%{WORD:logger}))(?<content>(.|\r|\n)*)"
				]
			add_tag => "vehco-log-server-main"
		}
		# Something wrong occurred !!! :O
		if "_grokparsefailure" in [tags] {
			grok {
				 patterns_dir => "/etc/logstash/grok"
				 match=>[
					"message","(?<content>(.|\r|\n)*)"
					]
				 add_tag => "vehco-log-server-main-grok_error"
	                     }
		}
       }

	# Server-cliffton
	if [type] == "vehco-server-cliffton" {
		grok {
			patterns_dir => ["/etc/logstash/grok"]
			match => [
				"message", "^\s*%{TIMESTAMP_ISO8601:timestamp}\s*%{LOGLEVEL:level} (?:(%{USERNAME:thread} %{JAVACLASS:logger}|%{USERNAME:thread} %{WORD:logger}|%{JAVACLASS:logger}|%{WORD:logger}))(?<content>(.|\r|\n)*)"
				]
			add_tag => "vehco-log-qa3"
		}
		# Something wrong occurred !!! :O
		if "_grokparsefailure" in [tags] {
			grok {
				 patterns_dir => "/etc/logstash/grok"
				 match=>[
					"message","(?<content>(.|\r|\n)*)"
					]
				 add_tag => "vehco-log-server-cliffton-grok_error"
	                     }
		}
       }

}
 
output {
    # Answers the question - what to do if there is match? 
	elasticsearch {
		cluster => "VEHCO"
		protocol => "http"
		# port => ""
		host => "192.168.1.203"
		node_name => "vehco-qa"
		index => "vehco-qa-%{+YYYY.MM.dd}"
	}
}

